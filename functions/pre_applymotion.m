function [interp_drifttable, zstack_corr] = pre_applymotion(zstack, drift_table)
    % Apply motion correction using drift table and interpolate frame shifts
    % Uses parallel processing
    %
    % Inputs:
    %   - zstack: The original 3D stack of images.
    %   - drift_table: A table containing motion estimates generated by dft_registration.m
    %                  [error,diffphase,net_y_shift,net_x_shift].
    %
    % Outputs:
    %   - interp_drifttable: Interpolated drift table (y and x shifts for each frame).
    %   - zstack_corr: The corrected z-stack after applying the motion shifts.

    % Extract dimensions and drift information
    [height, width, num_frames] = size(zstack);
    original_frames = 1:size(drift_table, 2); % Drift table frame indices
    row_shifts = drift_table(3, :); % Row shifts from drift table
    col_shifts = drift_table(4, :); % Column shifts from drift table

    % Interpolate drift shifts for all frames
    interp_frames = linspace(1, size(drift_table, 2), num_frames);
    row_shifts_interp = interp1(original_frames, row_shifts, interp_frames, 'linear');
    col_shifts_interp = interp1(original_frames, col_shifts, interp_frames, 'linear');

    % Calculate the maximum shift range to determine the container size
    max_row_shift = ceil(max(abs(row_shifts_interp)));
    max_col_shift = ceil(max(abs(col_shifts_interp)));

    % Expand dimensions to accommodate shifts
    padded_height = height + 2 * max_row_shift;
    padded_width = width + 2 * max_col_shift;

    % Initialize corrected z-stack with padded dimensions
    zstack_corr = zeros(padded_height, padded_width, num_frames, 'like', zstack);

    % Use parallel processing for shift correction
    fprintf('Processing frames...\n'); % Notify user
    tic; % Start timing
    parfor i = 1:num_frames
        % Get the shift values for the current frame
        row_shift = round(row_shifts_interp(i));
        col_shift = round(col_shifts_interp(i));
        
        % Extract the current frame
        frame = zstack(:, :, i);

        % Create a larger container and place the original frame at the center
        padded_frame = zeros(padded_height, padded_width, 'like', frame);
        padded_frame(max_row_shift + 1:max_row_shift + height, ...
                     max_col_shift + 1:max_col_shift + width) = frame;

        % Apply the shift using imtranslate
        corrected_frame = imtranslate(padded_frame, [col_shift, row_shift], ...
            'OutputView', 'same', 'FillValues', 0);

        % Store the padded corrected frame
        zstack_corr(:, :, i) = corrected_frame;
    end
    toc; % End timing
    fprintf('Pixel shift correction completed.\n');

    % Create the interpolated drift table output
    interp_drifttable = [row_shifts_interp; col_shifts_interp];
end
